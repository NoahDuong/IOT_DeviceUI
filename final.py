# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final_pj.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5 import QtCore, QtGui, QtWidgets
from numpy import random
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QSpacerItem, QSizePolicy
from PyQt5.QtCore import Qt, QRect, QTimer
from PyQt5.QtGui import QColor, QPainter
import requests, json
from datetime import datetime

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1127, 776)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.NAME = QtWidgets.QLabel(self.centralwidget)
        self.NAME.setGeometry(QtCore.QRect(0, 0, 901, 71))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.NAME.setFont(font)
        self.NAME.setAlignment(QtCore.Qt.AlignCenter)
        self.NAME.setObjectName("NAME")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-90, 630, 1341, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.NAME_2 = QtWidgets.QLabel(self.centralwidget)
        self.NAME_2.setGeometry(QtCore.QRect(0, 670, 1121, 41))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Text Semibold")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.NAME_2.setFont(font)
        self.NAME_2.setTextFormat(QtCore.Qt.RichText)
        self.NAME_2.setAlignment(QtCore.Qt.AlignCenter)
        self.NAME_2.setObjectName("NAME_2")
        self.CLEAR_BUTTON = QtWidgets.QPushButton(self.centralwidget)
        self.CLEAR_BUTTON.setGeometry(QtCore.QRect(210, 500, 221, 91))
        self.CLEAR_BUTTON.setObjectName("CLEAR_BUTTON")
        self.CLEAR_BUTTON.clicked.connect(self.clearStates)
        self.EXIT_BUTTON = QtWidgets.QPushButton(self.centralwidget)
        self.EXIT_BUTTON.setGeometry(QtCore.QRect(600, 500, 221, 91))
        self.EXIT_BUTTON.setObjectName("EXIT_BUTTON")
        self.EXIT_BUTTON.clicked.connect(self.EXIT)
        self.DEVICE_MAIN = QtWidgets.QListWidget(self.centralwidget)
        self.DEVICE_MAIN.setGeometry(QtCore.QRect(520, 100, 201, 361))
        self.DEVICE_MAIN.setObjectName("DEVICE_MAIN")
        self.MODE_MAIN = QtWidgets.QListView(self.centralwidget)
        self.MODE_MAIN.setGeometry(QtCore.QRect(50, 100, 141, 121))
        self.MODE_MAIN.setObjectName("MODE_MAIN")
        self.CONTROL_MAIN = QtWidgets.QGraphicsView(self.centralwidget)
        self.CONTROL_MAIN.setGeometry(QtCore.QRect(220, 100, 261, 361))
        self.CONTROL_MAIN.setObjectName("CONTROL_MAIN")
        self.MODE_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.MODE_LABEL.setGeometry(QtCore.QRect(50, 70, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setUnderline(True)
        self.MODE_LABEL.setFont(font)
        self.MODE_LABEL.setAlignment(QtCore.Qt.AlignCenter)
        self.MODE_LABEL.setObjectName("MODE_LABEL")
        self.CONTROL_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.CONTROL_LABEL.setGeometry(QtCore.QRect(220, 70, 261, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setUnderline(True)
        self.CONTROL_LABEL.setFont(font)
        self.CONTROL_LABEL.setAlignment(QtCore.Qt.AlignCenter)
        self.CONTROL_LABEL.setObjectName("CONTROL_LABEL")
        self.DEVICE_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.DEVICE_LABEL.setGeometry(QtCore.QRect(520, 70, 201, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(False)
        font.setUnderline(True)
        font.setStrikeOut(False)
        self.DEVICE_LABEL.setFont(font)
        self.DEVICE_LABEL.setAlignment(QtCore.Qt.AlignCenter)
        self.DEVICE_LABEL.setObjectName("DEVICE_LABEL")
        self.LAMP_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.LAMP_LABEL.setGeometry(QtCore.QRect(520, 110, 201, 111))
        self.LAMP_LABEL.setStyleSheet("image: url(:/img/lamp.png);")
        self.LAMP_LABEL.setText("")
        self.LAMP_LABEL.setObjectName("LAMP_LABEL")
        self.LAMP_ON_BUTTON = QtWidgets.QPushButton(self.centralwidget)
        self.LAMP_ON_BUTTON.setGeometry(QtCore.QRect(230, 120, 101, 71))
        self.LAMP_ON_BUTTON.setObjectName("LAMP_ON_BUTTON")
        self.LAMP_ON_BUTTON.clicked.connect(self.turnLampOn)
        self.LAMP_OFF_BUTTON = QtWidgets.QPushButton(self.centralwidget)
        self.LAMP_OFF_BUTTON.setGeometry(QtCore.QRect(360, 120, 101, 71))
        self.LAMP_OFF_BUTTON.setObjectName("LAMP_OFF_BUTTON")
        self.LAMP_OFF_BUTTON.clicked.connect(self.turnLampOff)
        self.AIR_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.AIR_LABEL.setGeometry(QtCore.QRect(520, 240, 201, 111))
        self.AIR_LABEL.setStyleSheet("image: url(:/img/air_OFF.png);")
        self.AIR_LABEL.setText("")
        self.AIR_LABEL.setObjectName("AIR_LABEL")
        self.PC_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.PC_LABEL.setGeometry(QtCore.QRect(520, 360, 201, 101))
        self.PC_LABEL.setStyleSheet("image: url(:/img/computer.png);")
        self.PC_LABEL.setText("")
        self.PC_LABEL.setObjectName("PC_LABEL")
        self.LOGO = QtWidgets.QLabel(self.centralwidget)
        self.LOGO.setEnabled(False)
        self.LOGO.setGeometry(QtCore.QRect(910, 10, 201, 71))
        self.LOGO.setStyleSheet("image: url(:/img/logo.png);")
        self.LOGO.setText("")
        self.LOGO.setObjectName("LOGO")
        self.AIR_SLIDER = QtWidgets.QSlider(self.centralwidget)
        self.AIR_SLIDER.setGeometry(QtCore.QRect(230, 250, 241, 51))
        self.AIR_SLIDER.setOrientation(QtCore.Qt.Horizontal)        
        self.AIR_SLIDER.setMaximum(3)
        self.AIR_SLIDER.valueChanged.connect(self.updateAirLabel)
        self.AIR_SLIDER.setObjectName("AIR_SLIDER")
        self.CHART_MAIN = QtWidgets.QWidget(self.centralwidget)
        self.CHART_MAIN.setGeometry(QtCore.QRect(730, 100, 381, 221))
        self.CHART_MAIN.setObjectName("CHART_MAIN")
        self.chart_layout = QtWidgets.QVBoxLayout(self.CHART_MAIN)
        self.CHART_MAIN.setLayout(self.chart_layout)
        self.SENSOR_1 = QtWidgets.QWidget(self.centralwidget)
        self.SENSOR_1.setGeometry(QtCore.QRect(730, 330, 381, 131))
        self.SENSOR_1.setObjectName("SENSOR_1") 
        self.sensor_widget = self.sensor_widget(self.SENSOR_1)
        self.SENSOR_1_layout = QtWidgets.QVBoxLayout(self.SENSOR_1)
        self.SENSOR_1_layout.addWidget(self.sensor_widget)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(60, 130, 121, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.currentIndexChanged.connect(self.onComboBoxChange)
        self.PC_SWITCH = QtWidgets.QPushButton(self.centralwidget)
        self.PC_SWITCH.setGeometry(QtCore.QRect(270, 380, 161, 61))
        self.PC_SWITCH.setCheckable(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/img/switch_off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap(":/img/switch_on.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.PC_SWITCH.setText("")
        self.PC_SWITCH.setIconSize(QtCore.QSize(200, 100))
        self.PC_SWITCH.setObjectName("PC_SWITCH")
        self.PC_SWITCH.clicked.connect(self.togglePCSwitch)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1127, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.plotElectricBill()
        self.fig, self.ax = plt.subplots(figsize=(6, 4))
        self.canvas = FigureCanvas(self.fig)
        self.SENSOR_1_layout.addWidget(self.canvas)
    class sensor_widget(QtWidgets.QWidget):
        def __init__(self, parent=None):
            super(Ui_MainWindow.sensor_widget, self).__init__(parent)
            self.figure = Figure()
            self.canvas = FigureCanvas(self.figure)
            self.ax = self.figure.add_subplot(111)

            self.temperature_data = []
            self.dewpoint_data = []
            self.feelslike_data = []
            self.time_data = []
            self.time_counter = 0

                # Layout
            layout = QtWidgets.QVBoxLayout()
            layout.addWidget(self.canvas)
            self.setLayout(layout)

            self.timer = QtCore.QTimer()
            self.timer.timeout.connect(self.update_graph)
            self.timer.setInterval(1000) 
            self.timer.start()

            self.restart_timer = QtCore.QTimer()
            self.restart_timer.timeout.connect(self.restart_chart)
            self.restart_timer.setInterval(60000) 
            self.restart_timer.start()
        def fetch_sensor_data(self):
            try:
                response = requests.get(
                "http://api.openweathermap.org/data/2.5/weather?q=Ho%20Chi%20Minh&appid=559c2d91995849fa612070fecb8a7bc3&units=metric"
            )
                response.raise_for_status()
                data = response.json()
                temperature = data["main"]["temp"]
                feelslike = data["main"]["feels_like"]                
                humidity = data["main"]["humidity"]
                dewpoint = temperature - ((100 - humidity) / 5) 
                return temperature, dewpoint, feelslike
            except requests.exceptions.RequestException as e:
                print(f"Request error: {e}")
                return None, None, None
            except ValueError as e:
                print(f"JSON decode error: {e}")
                return None, None, None
            except KeyError as e:
                print(f"Missing key in response: {e}")
                return None, None, None

        def update_graph(self):
            temperature, dewpoint, feelslike = self.fetch_sensor_data()
            if temperature is not None:
                self.time_data.append(self.time_counter)
                self.temperature_data.append(temperature)
                self.dewpoint_data.append(dewpoint)
                self.feelslike_data.append(feelslike)
                self.time_counter += 3
                if len(self.time_data) > 20:
                    self.time_data.pop(0)
                    self.temperature_data.pop(0)
                    self.dewpoint_data.pop(0)
                    self.feelslike_data.pop(0)

                self.ax.clear()
                lines = {
                    "Temparture": (self.time_data, self.temperature_data, "red"),
                    "Humidity": (self.time_data, self.dewpoint_data, "green"),
                    "Feels Like (°C)": (self.time_data, self.feelslike_data, "orange"),
                }
                for label, (x_data, y_data, color) in lines.items():
                    self.ax.plot(x_data, y_data, label=label, color=color)
                for y_data, color, label in zip(
                    [self.temperature_data, self.dewpoint_data, self.feelslike_data],
                    ["red", "green", "orange"],
                    ["Temperature", "Dew Point", "Feels Like"],
                ):
                    if y_data:
                        last_value = y_data[-1]
                        self.ax.text(
                            self.time_data[-1],
                            last_value,
                            f"{last_value:.1f}",
                            color=color,
                            ha="center",
                            va="bottom",
                        )          
                self.canvas.draw()

        def restart_chart(self):
            print("Restarting chart...")
            self.temperature_data.clear()
            self.dewpoint_data.clear()
            self.feelslike_data.clear()
            self.time_data.clear()
            self.time_counter = 0
            self.ax.clear()
            self.canvas.draw()

        def stop_auto_update(self):
            self.timer.stop()

        def start_auto_update(self):
            self.timer.start()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.NAME.setText(_translate("MainWindow", "DEVICE CONTROL"))
        self.NAME_2.setText(_translate("MainWindow", "DUONG GIA BAO - 22119166"))
        self.CLEAR_BUTTON.setText(_translate("MainWindow", "CLEAR"))
        self.EXIT_BUTTON.setText(_translate("MainWindow", "EXIT"))
        self.MODE_LABEL.setText(_translate("MainWindow", "Mode"))
        self.CONTROL_LABEL.setText(_translate("MainWindow", "Control"))
        self.DEVICE_LABEL.setText(_translate("MainWindow", "Device"))
        self.LAMP_ON_BUTTON.setText(_translate("MainWindow", "ON"))
        self.LAMP_OFF_BUTTON.setText(_translate("MainWindow", "OFF"))
        self.comboBox.setItemText(0, _translate("MainWindow", "MODE 1"))
        self.comboBox.setItemText(1, _translate("MainWindow", "MODE 2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "MODE 3"))
    def plotElectricBill(self):
        devices = ['Lamp', 'Air Conditioner', 'PC']
        power_consumption = [60, 2000, 150] # in watt
        usage_hours = [100, 30, 50] # cacualte in hours per m
        cost_per_kwh = 0.13 # $
        energy_consumed = [(power * hours)/ 1000 for power, hours in zip(power_consumption, usage_hours)]
        bills = [energy * cost_per_kwh for energy in energy_consumed]
    # Create a bar chart
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.bar(devices, bills, color=['yellow', 'green', 'blue'])
    # Clear previous chart if exist
        for i in reversed(range(self.CHART_MAIN.layout().count())): 
            widget = self.CHART_MAIN.layout().itemAt(i).widget()
            if widget is not None:
                widget.deleteLater()
    # Draw
        canvas = FigureCanvas(fig)
        self.chart_layout.addWidget(canvas)
        canvas.draw()
    def turnLampOn(self):
        self.LAMP_LABEL.setStyleSheet("image: url(:/img/lamp_on.png);")
    def turnLampOff(self):
        self.LAMP_LABEL.setStyleSheet("image: url(:/img/lamp.png);")
    def togglePCSwitch(self):
        if self.PC_SWITCH.isChecked():
            self.PC_SWITCH.setIcon(QtGui.QIcon(":/img/switch_on.png"))
            self.PC_LABEL.setStyleSheet("image: url(:/img/computer_on.png);")  # Change to computer_on.png
        else:
            self.PC_SWITCH.setIcon(QtGui.QIcon(":/img/switch_off.png"))
            self.PC_LABEL.setStyleSheet("image: url(:/img/computer.png);")  # Change back to computer.png
    def updateAirLabel(self):
        slider_value = self.AIR_SLIDER.value()
        if slider_value == 0:
            self.AIR_LABEL.setStyleSheet("image: url(:/img/air_OFF.png);") 
        elif slider_value == 1:
            self.AIR_LABEL.setStyleSheet("image: url(:/img/air_ON1.png);") 
        elif slider_value == 2:
            self.AIR_LABEL.setStyleSheet("image: url(:/img/air_ON2.png);") 
        elif slider_value == 3:
            self.AIR_LABEL.setStyleSheet("image: url(:/img/air_ON3.png);") 
    def onComboBoxChange(self):
        if self.comboBox.currentText() == "MODE 1":
            self.turnLampOn()
            self.AIR_SLIDER.setValue(3)  
            self.PC_SWITCH.setChecked(True) 
            self.PC_SWITCH.setIcon(QtGui.QIcon(":/img/switch_on.png"))
            self.PC_LABEL.setStyleSheet("image: url(:/img/computer_on.png);")
        if self.comboBox.currentText() == "MODE 2":
            self.turnLampOff()
            self.AIR_SLIDER.setValue(1)  
            self.PC_SWITCH.setChecked(False) 
            self.PC_SWITCH.setIcon(QtGui.QIcon(":/img/switch_off.png"))
            self.PC_LABEL.setStyleSheet("image: url(:/img/computer.png);")
        if self.comboBox.currentText() == "MODE 3":
            self.turnLampOn()
            self.AIR_SLIDER.setValue(0)  
            self.PC_SWITCH.setChecked(True) 
            self.PC_SWITCH.setIcon(QtGui.QIcon(":/img/switch_on.png"))
            self.PC_LABEL.setStyleSheet("image: url(:/img/computer_on.png);")
    def clearStates(self):
        self.LAMP_LABEL.setStyleSheet("image: url(:/img/lamp.png);")
        self.AIR_LABEL.setStyleSheet("image: url(:/img/air_OFF.png);")
        self.PC_LABEL.setStyleSheet("image: url(:/img/computer.png);")
        self.AIR_SLIDER.setValue(0)
        self.PC_SWITCH.setChecked(False)
        self.PC_SWITCH.setIcon(QtGui.QIcon(":/img/switch_off.png"))
    def EXIT(self):
        QtWidgets.QApplication.quit()  # Exit the application

import img_rc
#########################################################################
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
